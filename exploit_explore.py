import random


class ActionSelector:
    def __init__(self, dqn, num_actions, initial_epsilon=1, middle_epsilon=0.1, finish_epsilon=0.01,
                 minimum_replay_size=50000, maximum_replay_size=1000000, final_frame_number=25000000):
        self.dqn = dqn
        self.num_actions = num_actions
        self.initial_epsilon = initial_epsilon
        self.middle_epsilon = middle_epsilon
        self.finish_epsilon = finish_epsilon

        self.minimum_replay_size = minimum_replay_size
        self.maximum_replay_size = maximum_replay_size
        self.final_frame_number = final_frame_number

        self.slope1 = (self.middle_epsilon - self.initial_epsilon) / (self.maximum_replay_size - self.minimum_replay_size)
        self.intercept1 = self.initial_epsilon - self.slope1 * self.minimum_replay_size

        self.slope2 = (self.finish_epsilon - self.middle_epsilon) / (self.final_frame_number - self.maximum_replay_size)
        self.intercept2 = self.finish_epsilon - self.slope2 * self.final_frame_number

        self.action_space = range(self.num_actions)

    def calculate_epsilon(self, replay_memory_size):
        if replay_memory_size < self.minimum_replay_size:
            current_epsilon = self.initial_epsilon
        elif replay_memory_size < self.maximum_replay_size:
            current_epsilon = self.slope1 * replay_memory_size + self.intercept1
        elif replay_memory_size < self.final_frame_number:
            current_epsilon = self.slope2 * replay_memory_size + self.intercept2
        else:
            current_epsilon = self.finish_epsilon
        self.eps_debug = current_epsilon # for logging purposes
        return current_epsilon

    def act(self, state, replay_memory_size):
        current_epsilon = self.calculate_epsilon(replay_memory_size)
        if random.random() < current_epsilon:
            return random.choice(self.action_space)
        else:
            return self.dqn.get_best_action(state)

    def act_test(self, state):
        return self.dqn.get_best_action(state)